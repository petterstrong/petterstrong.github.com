<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>//</link>
    <atom:link href="//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 08 Sep 2016 19:14:56 +0800</pubDate>
    <lastBuildDate>Thu, 08 Sep 2016 19:14:56 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>声明：关于网站一些说明</title>
        <description>&lt;p&gt;本着最佳的性能，在经过几次模块升级之后，网站框架大体落成。&lt;/p&gt;

&lt;p&gt;现在你看到的版本是&lt;code&gt;v3.00&lt;/code&gt;，基本没有特效和实质性的内容&lt;/p&gt;

&lt;p&gt;最近博主比较忙，所以暂时还没有引入社会化评论和网站流量统计，十月后会陆续把博客整理发上来，敬请关注。&lt;/p&gt;

&lt;p&gt;也可以关注本人微博&lt;a href=&quot;http://www.weibo.com/xiaoming90/profile?rightmod=1&amp;amp;wvr=6&amp;amp;mod=personinfo&amp;amp;is_all=1&quot;&gt;
	zhangmzer
&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 29 Aug 2016 18:15:31 +0800</pubDate>
        <link>//design/new/life/2016/08/29/declaration.html</link>
        <guid isPermaLink="true">//design/new/life/2016/08/29/declaration.html</guid>
        
        
        <category>design</category>
        
        <category>new</category>
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>感谢我一路的坚持!!</title>
        <description>
</description>
        <pubDate>Wed, 30 Mar 2016 22:15:31 +0800</pubDate>
        <link>//science/2016/03/30/science0.html</link>
        <guid isPermaLink="true">//science/2016/03/30/science0.html</guid>
        
        
        <category>science</category>
        
      </item>
    
      <item>
        <title>前端项目模块化</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;sass书写的css,用jade写HTML文件的的测试、检查、合并、压缩、格式化、部署，监听。压缩合并可以减少,可以减少css,js文件请求,优化前端性能。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;一、准备工作&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3&gt;全局安装&lt;/h3&gt;

&lt;p&gt;首先，假设你的电脑已经装好node.js环境，且已经具有&lt;code class=&quot;highlighter-rouge&quot;&gt;npm(Node.js package manager)&lt;/code&gt;包管理工具。&lt;/p&gt;

&lt;p&gt;那么好，为啥我们需要一个包管理工具呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。&lt;/p&gt;

&lt;p&gt;更重要的是，如果我们要使用模块A，而模块A又依赖于模块B，模块B又依赖于模块X和模块Y，npm可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install gulp -g  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-g&lt;/code&gt;,全局安装。将安装在全局路径中，并且写入环境变量中。通过命令行在任何地方调用。但是注意！！！在我Mac系统下有出现一些问题。此处有坑，请好好看看。&lt;/p&gt;

&lt;p&gt;非全局安装，安装在当前定位目录， 本地安装将安装在定位目录的&lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;文件夹下，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt;调用；&lt;/p&gt;

&lt;h3&gt;项目文件夹下处理命令&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd foldername
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;进入文件夹&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo touch package.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建新文件&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;中输入相关信息（信息比较多，可以直接enter过）&lt;/p&gt;

&lt;p&gt;发现没有&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp&lt;/code&gt;这个时候需要输入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install gulp --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;p&gt;解释：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--save&lt;/code&gt;：将保存配置信息至&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;（package.json是nodejs项目配置文件）；&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-dev&lt;/code&gt;：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;输入完成之后，出现一个&lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;文件夹(观察文件夹下的文档不能为空！！)。
如果已经存在配置文件的话直接输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;##二、Gulp基础&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;创建任务&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;在根目录下创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;文件，且在文件中写入(命令行中写入指令是&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo touch filename&lt;/code&gt; 、&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+o&lt;/code&gt;保存、&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+x&lt;/code&gt;退出)如下信息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var gulp=require('gulp');  //创建gulp模板

gulp.task('halo',function(){
		console.log('halo gulp!');

	})  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在命令行中输入&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp halo&lt;/code&gt;命令执行输出&lt;code class=&quot;highlighter-rouge&quot;&gt;halo gulp&lt;/code&gt;。
简单介绍一下默认任务。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task('default',function(){
		console.log('halo gulp!');
	}) //可以使用数组定义回调函数
gulp.task('user',['default'])  //数组中放入定义的字符串，然后命令输入gulp就可以执行了。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3&gt;文件文件夹处理&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.src()&lt;/code&gt;方法可以帮组我们找出将要处理的文件，
&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.pipe()&lt;/code&gt;方法处理找到的文件。&lt;code class=&quot;highlighter-rouge&quot;&gt;pipe()&lt;/code&gt;可以理解为管道，每个管道指定功能，然后使用&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.dest()&lt;/code&gt;方法把处理好的文件放在指定的地方。&lt;/p&gt;

&lt;p&gt;使用gulp实现文件的拷贝：&lt;/p&gt;

&lt;p&gt;新建一个测试的index.html写入相关内容，在&lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;输入内容。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task('copy',function(){
	//gulp.src() 找到测试文件index.html 然后使用.pipe()通道
	//gulp.dest() 发布拷贝

	return gulp.src('index.html').pipe(gulp.dest('dist'));  //自动生成保存文件夹dist

	})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp copy&lt;/code&gt;命令，然后去dist目录下验证&lt;/p&gt;

&lt;p&gt;拷贝图片文件 从某个工程下拷贝图片，在&lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt;文件中写入如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task('img',function(){
	return gulp.src('img/*.jpg').pipe(gulp.dest('dist/img'));
	})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp img&lt;/code&gt;，验证图片&lt;/p&gt;

&lt;p&gt;拷贝img文件夹以及文件夹下的文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task('img',function(){
	gulp.src('img/**').pipe(gulp.dest('dist/img'));
	})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/*&lt;/code&gt; 代表拷贝文件夹以及文件夹下的文件
&lt;code class=&quot;highlighter-rouge&quot;&gt;/**&lt;/code&gt; 代表文件夹下所有文件以及子文件夹下的所有文件（全拷贝）&lt;/p&gt;

&lt;p&gt;两个文件夹同时拷贝到某一个文件夹下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task('data',function(){
		return gulp.src(['xml/*.xml','json/*.json']).pipe(gulp.dest('dist/data'));
	})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;排除某个文件&lt;code class=&quot;highlighter-rouge&quot;&gt;!json/b.json&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task('data',function(){
		return gulp.src(['xml/*.xml','json/*.json','!json/b.json']).pipe(gulp.dest('dist/data'));
	})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用回调函数执行多个任务&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task('build',['copy','img','data'],function(){
	console.log('编译成功');
	})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行命令&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp build&lt;/code&gt;查看效果&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;侦测文件变化&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gulp.task('watch',function(){
	gulp.watch('index.html',['copy']):
	gulp.watch('img/*.{jpg,png}',['img']):
	gulp.watch(['xml/*.xml','json/*.json','!json/b.json'],['data']):

	})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp watch&lt;/code&gt; ，&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+c&lt;/code&gt;结束，回到文件查看效果&lt;/p&gt;

&lt;h3&gt;三、Gulp插件安装&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;安装依赖指令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install gulp-sass --save-dev  //安装sass

npm install gulp-connect --save-dev  //gulp-connect搭建本地服务

npm install gulp-concat --save-dev  //合并文件插件

npm install gulp-uglify --save-dev  //将合并后的js进行压缩

npm install gulp-rename --save-dev  //保留压缩前后的两个文件

npm install gulp-minify-css --save-dev  //压缩css

npm install gulp-imagemin --save-dev  //对图片进行压缩
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;gulp编译sass&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var sass = require('gulp-sass');

gulp.task('sass',function(){
	return gulp.src('stylesheet/**/*.css').pipe(sass()).pipe(gulp.dest('dist/css'));
	}) ----
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-connect&lt;/code&gt;搭建本地服务&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var connect= require('gulp-connect');
gulp.task('sever',function(){
	connect.sever({root:'dist'});

	}) 启动服务：命令行执行`gulp sever`  修改文件后页面自动刷新

gulp.task('sever',function(){
	connect.sever({
		root:'dist',
		livereload:true,
		})
	}) 然后还要在`copy`任务中添加

gulp.task('copy',function(){
	return gulp.src('index.html').pipe(gulp.dest()).pipe(connect.reload())
	}) 在watch中添加
gulp.task('watch',function(){
	gulp.watch('index.html',['copy']);
}) 然后创建一个
gulp.task('default',['sever','watch'])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp default&lt;/code&gt;命令&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;合并文件gulp-concat&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var concat = require('gulp-concat');

gulp.task('scripts',function(){
	return gulp.src(['javascripts/avalon.js','javascripts/index.js'])
	.pipe(concat('vendor.js'))
	.pipe(gulp.dest('dist/js'));
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;将合并js文件进行压缩&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var uglify = require('gulp-uglify');

gulp.task('scripts',function(){
	return gulp.src(['javascripts/avalon.js','javascripts/index.js'])
	.pipe(concat('vendor.js'))
	.pipe(uglify())
	.pipe(gulp.dest('dist/js'));
}) ---- 保留前后压缩两个文件

var rename = require('gulp-rename');

gulp.task('scripts',function(){
	return gulp.src(['javascripts/avalon.js','javascripts/index.js'])
	.pipe(concat('vendor.js'))
	.pipe(gulp.dest('dist/js'))
	.pipe(uglify())
	.pipe(rename('vendor.min.js'))
	.pipe(gulp.dest('dist/js')); 
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;压缩css&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var minifyCss = require('gulp-minify-css');
gulp.task('sass',function(){
	return gulp.src('stylesheet/**/*.sass')
	.pipe(sass())
	.pipe(minifyCss())
	.pipe(gulp.dest('dist/css'));
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;对图片进行压缩&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var imagemin = require('gulp-imagemin'); 
gulp.task('images',function(){
	return gulp.src('images/**/*')
	.pipe(imagemin())
	.pipe(gulp.dest('dist/images'))
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp images&lt;/code&gt;执行命令&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Mar 2016 22:15:31 +0800</pubDate>
        <link>//install/2016/03/30/module.html</link>
        <guid isPermaLink="true">//install/2016/03/30/module.html</guid>
        
        
        <category>install</category>
        
      </item>
    
      <item>
        <title>谢天谢地你来啦!</title>
        <description>&lt;p&gt;中文测试&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jan 2014 14:15:31 +0800</pubDate>
        <link>//jekyll/update/2014/01/30/test-page.html</link>
        <guid isPermaLink="true">//jekyll/update/2014/01/30/test-page.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>浅谈js dom优化</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Don't aim for success if you want it; just do what you love and believe in, and it will come naturally. ### ***引言***
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;文档对象模型（DOM）是一个独立于特定语言的应用程序接口。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在浏览器中，DOM接口是以JavaScript实现的，通过DOM操作浏览器页面内的元素节点，这使得DOM成为JavaScript中的重要组成部分。&lt;/p&gt;

&lt;p&gt;在富客户端网页应用中，新节点元素都是通过DOM操作实现的。尽管DOM提供了丰富的接口供外部调用，但使用DOM的代价很大，频繁对DOM操作是比较损耗性能的，所以关于DOM的性能优化是前端性能优化的一个重要关注点。在本文中我不会对浏览器的渲染机制做过多赘述（如果想详细了解浏览器的工作机制，请参考文章&lt;a href=&quot;http://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/&quot;&gt;《浏览器的工作原理：新式网络浏览器揭秘》&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;这里先简单叙述一下DOM操作为何会影响性能：&lt;/em&gt;
&lt;em&gt;在浏览器中，DOM的实现和ECMAScript的实现是&lt;strong&gt;互相分离&lt;/strong&gt;的。例如：在IE中ECMAScript的实现在jscript.dll中，而DOM的实现在mshtml.dll中；在Chrome中使用WebKit中的WebCore处理DOM和渲染，但ECMAScript是在V8引擎中实现的，其他浏览器的情况类似。所以通过JavaScript代码调用DOM接口，相当于两个独立模块的交互。相比较在同一模块中的调用，这种跨模块的调用其性能损耗是很高的。但DOM操作对性能影响最大其实还是因为它导致了浏览器 的&lt;strong&gt;重绘（repaint）&lt;/strong&gt;和&lt;strong&gt;重排（reflow）&lt;/strong&gt;。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;了解浏览器的渲染机制之后，我们可以知道，重排的代价要比重绘大，重绘会影响部分元素，而重排则可能会影响全部元素，无论哪种影响都是我们不想发生的。实际环境中，如下的DOM操作会导致重绘或重排：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;增加，删除或修改可见DOM元素&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;页面初始化的渲染&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;移动DOM元素&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改css样式，改变DOM元素的尺寸大小&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DOM内容被修改，使得尺寸被撑大&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器窗口尺寸改变&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器窗口滚动&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看到，这些操作是DOM操作中比较常见的。现代浏览器会针对重排或重绘做性能优化，比如，把DOM操作积累一批后统一做一次重排或重绘。但在有些情况下，浏览器会立即重排或重绘。比如请求如下的DOM元素布局信息:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- offsetTop/Left/Width/Height
- scrollTop/Left/Width/Height
- clientTop/Left/Width/Heigh
- getComputedStyle()或 currentStyle 因为这些值都是动态计算的，所以浏览器需要尽快完成页面的绘制，然后计算返回值，从而打乱了重排或重绘的优化。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###&lt;strong&gt;&lt;em&gt;正文&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;既然DOM操作带来的页面重绘或重排是不可避免的，那么我们可以遵循一些最佳实践方法来降低由于重排或重绘带来的影响。如下是一些具体的实践方法：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 合并多次的DOM操作为单次的DOM操作&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最常见频繁进行DOM操作的是频繁修改DOM元素的样式，代码类似如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;element.style.color = '#f00';
element.style.background = '#999';
element.style.left = '10px';
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这种编码方式会因为频繁更改DOM元素的样式，触发页面多次的重排或重绘，上面介绍过，现代浏览器针对这种情况有性能的优化，它会合并DOM操作，但并不是所有的浏览器都存在这样的优化。&lt;/p&gt;

&lt;p&gt;改进方案有多种，推荐的方式把DOM操作尽量合并，代码可如下优化&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//解决方案：我们可以创建一个样式名，并把要修改的样式规则都放到这个类名上，然后在使用该样式时调用函数，同时实现表现，行为的相分离
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.  把DOM元素离线或隐藏后修改&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;把DOM元素从页面流中脱离或隐藏，这样处理后，只会在DOM元素脱离和添加时，或者是隐藏和显示时才会造成页面的重绘或重排，对脱离了页面布局流的DOM元素操作就不会导致页面的性能问题。这种方式适合那些需要大批量修改DOM元素的情况。具体的方式主要有三种：&lt;/p&gt;

&lt;p&gt;（1） 使用文档片段&lt;/p&gt;

&lt;p&gt;文档片段是一个轻量级的document对象，并不会和特定的页面关联。通过在文档片段上进行DOM操作，可以降低DOM操作对页面性能的影响，这种方式是创建一个文档片段，并在此片段上进行必要的DOM操作，操作完成后将它附加在页面中。对页面性能的影响只存在于最后把文档片段附加到页面的这一步操作上。代码类似如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var fragment = document.createDocumentFragment()
//一些基于fragment的大量DOM操作
...
document.getElementById('myElement').appendChild(fragment);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;（2） 通过设置DOM元素的display样式为none来隐藏元素&lt;/p&gt;

&lt;p&gt;这种方式是通过隐藏页面的DOM元素，达到在页面中移除元素的效果，经过大量的DOM操作后恢复元素原来的display样式。对于这类会引起页面重绘或重排的操作，就只有隐藏和显示DOM元素这两个步骤了。代码类似如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var myElement = document.getElementById('myElement');
myElement.style.display = 'none';
//一些基于myElement的大量DOM操作
...
myElement.style.display = 'none';
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;（3） 克隆DOM元素到内存中&lt;/p&gt;

&lt;p&gt;这种方式是把页面上的DOM元素克隆一份到内存中，然后再在内存中操作克隆的元素，操作完成后使用此克隆元素替换页面中原来的DOM元素。这样一来，影响性能的操作就只是最后替换元素的这一步操作了，在内存中操作克隆元素不会引起页面上的性能损耗。代码类似如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var old = document.getElementById('myElement');
var clone = old.cloneNode(true);
// 一些基于clone的大量DOM操作
...
old.parentNode.replaceChild(clone,old);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在在现代的浏览器中，因为有了DOM操作的优化，所以应用如上的方式后可能并不能明显感受到性能的改善。但是在仍然占有市场的一些旧浏览器中，应用以上这三种编码方式则可以大幅提高页面渲染性能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.  设置具有动画效果的DOM元素的position属性为fixed或absolute&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;把页面中具有动画效果的元素设置为绝对定位，使得元素脱离页面布局流，从而避免了页面频繁的重排，只涉及动画元素自身的重排了。这种做法可以提高动 画效果的展示性能。如果把动画元素设置为绝对定位并不符合设计的要求，则可以在动画开始时将其设置为绝对定位，等动画结束后恢复原始的定位设置。在很多的网站中，页面的顶部会有大幅的广告展示，一般会动画展开和折叠显示。如果不做性能的优化，这个效果的性能损耗是很明显的。使用这里提到的优化方案，则可以提高性能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.  谨慎取得DOM元素的布局信息&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;前面讨论过，获取DOM的布局信息会有性能的损耗，所以如果存在重复调用，最佳的做法是尽量把这些值缓存在局部变量中。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	for(var i = 0 ,len =oLi.length ; i &amp;lt; len ; i++){
		// do something
	}		 **5.使用事件委托来减少事件处理器的数量**
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 01 Jan 2014 20:50:31 +0800</pubDate>
        <link>//jekyll/update/2014/01/01/%E6%B5%85%E8%B0%88JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BDOM%E6%93%8D%E4%BD%9C.html</link>
        <guid isPermaLink="true">//jekyll/update/2014/01/01/%E6%B5%85%E8%B0%88JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8BDOM%E6%93%8D%E4%BD%9C.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
