---
layout: post
title:  "前端项目模块化"
date:   2016-03-30 19:45:31 +0530
categories: install
author: "张 明"
---


>sass书写的css,用jade写HTML文件的的测试、检查、合并、压缩、格式化、部署，监听。压缩合并可以减少,可以减少css,js文件请求,优化前端性能。





<h3>一、准备工作</h3>


-----

<h3>全局安装</h3>



首先，假设你的电脑已经装好node.js环境，且已经具有`npm(Node.js package manager)`包管理工具。

那么好，为啥我们需要一个包管理工具呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。



更重要的是，如果我们要使用模块A，而模块A又依赖于模块B，模块B又依赖于模块X和模块Y，npm可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。



	npm install gulp -g  




`-g`,全局安装。将安装在全局路径中，并且写入环境变量中。通过命令行在任何地方调用。但是注意！！！在我Mac系统下有出现一些问题。此处有坑，请好好看看。

非全局安装，安装在当前定位目录， 本地安装将安装在定位目录的`node_modules`文件夹下，通过`require()`调用；





<h3>项目文件夹下处理命令</h3>


	cd foldername

进入文件夹

	sudo touch package.json

创建新文件`package.json`
	
	npm init


在`package.json`中输入相关信息（信息比较多，可以直接enter过）

发现没有`gulp`这个时候需要输入

	npm install gulp --save-dev

-----
-----
解释：

`--save`：将保存配置信息至`package.json`（package.json是nodejs项目配置文件）；

`-dev`：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；


-----
-----

输入完成之后，出现一个`node_modules`文件夹(观察文件夹下的文档不能为空！！)。
如果已经存在配置文件的话直接输入 `npm install`




##二、Gulp基础

----

<h3>创建任务</h3>


-----


在根目录下创建一个`gulpfile.js`文件，且在文件中写入(命令行中写入指令是`sudo touch filename` 、`ctrl+o`保存、`ctrl+x`退出)如下信息：

	var gulp=require('gulp');  //创建gulp模板

	gulp.task('halo',function(){
			console.log('halo gulp!');
	
		})  

在命令行中输入`gulp halo`命令执行输出`halo gulp`。
简单介绍一下默认任务。

	gulp.task('default',function(){
			console.log('halo gulp!');
		}) //可以使用数组定义回调函数
	gulp.task('user',['default'])  //数组中放入定义的字符串，然后命令输入gulp就可以执行了。

----


<h3>文件文件夹处理</h3>
----
`gulp.src()`方法可以帮组我们找出将要处理的文件，
`gulp.pipe()`方法处理找到的文件。`pipe()`可以理解为管道，每个管道指定功能，然后使用`gulp.dest()`方法把处理好的文件放在指定的地方。

使用gulp实现文件的拷贝：

新建一个测试的index.html写入相关内容，在`gulpfile.js`输入内容。

	gulp.task('copy',function(){
		//gulp.src() 找到测试文件index.html 然后使用.pipe()通道
		//gulp.dest() 发布拷贝

		return gulp.src('index.html').pipe(gulp.dest('dist'));  //自动生成保存文件夹dist

		})


执行`gulp copy`命令，然后去dist目录下验证


拷贝图片文件 从某个工程下拷贝图片，在`gulpfile.js`文件中写入如下：

	
	gulp.task('img',function(){
		return gulp.src('img/*.jpg').pipe(gulp.dest('dist/img'));
		})


执行`gulp img`，验证图片

拷贝img文件夹以及文件夹下的文件

	gulp.task('img',function(){
		gulp.src('img/**').pipe(gulp.dest('dist/img'));
		})

`/*` 代表拷贝文件夹以及文件夹下的文件
`/**` 代表文件夹下所有文件以及子文件夹下的所有文件（全拷贝）



两个文件夹同时拷贝到某一个文件夹下

	gulp.task('data',function(){
			return gulp.src(['xml/*.xml','json/*.json']).pipe(gulp.dest('dist/data'));
		})


排除某个文件`!json/b.json`


	gulp.task('data',function(){
			return gulp.src(['xml/*.xml','json/*.json','!json/b.json']).pipe(gulp.dest('dist/data'));
		})



使用回调函数执行多个任务


	gulp.task('build',['copy','img','data'],function(){
		console.log('编译成功');
		})


执行命令`gulp build`查看效果

----



<h3>侦测文件变化</h3>


	gulp.task('watch',function(){
		gulp.watch('index.html',['copy']):
		gulp.watch('img/*.{jpg,png}',['img']):
		gulp.watch(['xml/*.xml','json/*.json','!json/b.json'],['data']):

		})


执行 `gulp watch` ，`ctrl+c`结束，回到文件查看效果




<h3>三、Gulp插件安装</h3>

----

安装依赖指令

	npm install gulp-sass --save-dev  //安装sass

	npm install gulp-connect --save-dev  //gulp-connect搭建本地服务

	npm install gulp-concat --save-dev  //合并文件插件

	npm install gulp-uglify --save-dev  //将合并后的js进行压缩

	npm install gulp-rename --save-dev  //保留压缩前后的两个文件

	npm install gulp-minify-css --save-dev  //压缩css

	npm install gulp-imagemin --save-dev  //对图片进行压缩


----

gulp编译sass 

	var sass = require('gulp-sass');

	gulp.task('sass',function(){
		return gulp.src('stylesheet/**/*.css').pipe(sass()).pipe(gulp.dest('dist/css'));
		})
----

`gulp-connect`搭建本地服务


	var connect= require('gulp-connect');
	gulp.task('sever',function(){
		connect.sever({root:'dist'});

		})
启动服务：命令行执行`gulp sever` 
修改文件后页面自动刷新

	gulp.task('sever',function(){
		connect.sever({
			root:'dist',
			livereload:true,
			})
		})
然后还要在`copy`任务中添加
	
	gulp.task('copy',function(){
		return gulp.src('index.html').pipe(gulp.dest()).pipe(connect.reload())
		})
在watch中添加
	gulp.task('watch',function(){
		gulp.watch('index.html',['copy']);
	})
然后创建一个
	gulp.task('default',['sever','watch'])

最后执行`gulp default`命令

----

合并文件gulp-concat

	var concat = require('gulp-concat');

	gulp.task('scripts',function(){
		return gulp.src(['javascripts/avalon.js','javascripts/index.js'])
		.pipe(concat('vendor.js'))
		.pipe(gulp.dest('dist/js'));
	})

----

将合并js文件进行压缩

	
	var uglify = require('gulp-uglify');

	gulp.task('scripts',function(){
		return gulp.src(['javascripts/avalon.js','javascripts/index.js'])
		.pipe(concat('vendor.js'))
		.pipe(uglify())
		.pipe(gulp.dest('dist/js'));
	})
----
保留前后压缩两个文件

	var rename = require('gulp-rename');

	gulp.task('scripts',function(){
		return gulp.src(['javascripts/avalon.js','javascripts/index.js'])
		.pipe(concat('vendor.js'))
		.pipe(gulp.dest('dist/js'))
		.pipe(uglify())
		.pipe(rename('vendor.min.js'))
		.pipe(gulp.dest('dist/js')); 
	})

----
压缩css

	var minifyCss = require('gulp-minify-css');
	gulp.task('sass',function(){
		return gulp.src('stylesheet/**/*.sass')
		.pipe(sass())
		.pipe(minifyCss())
		.pipe(gulp.dest('dist/css'));
	})


----
对图片进行压缩

	var imagemin = require('gulp-imagemin'); 
	gulp.task('images',function(){
		return gulp.src('images/**/*')
		.pipe(imagemin())
		.pipe(gulp.dest('dist/images'))
	})

`gulp images`执行命令



